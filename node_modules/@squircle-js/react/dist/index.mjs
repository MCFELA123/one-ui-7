"use client";
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/index.tsx
import { getSvgPath as getSvgPath2 } from "figma-squircle";
import { useMemo as useMemo2 } from "react";

// src/use-element-size.ts
import { useCallback, useState } from "react";

// src/use-event-listener.ts
import { useEffect as useEffect2, useRef } from "react";

// src/use-isomorphic-layout-effect.ts
import { useEffect, useLayoutEffect } from "react";
var useIsomorphicLayoutEffect = typeof window !== "undefined" ? useLayoutEffect : useEffect;

// src/use-event-listener.ts
function useEventListener(eventName, handler, element, options) {
  const savedHandler = useRef(handler);
  useIsomorphicLayoutEffect(() => {
    savedHandler.current = handler;
  }, [handler]);
  useEffect2(() => {
    var _a;
    const targetElement = (_a = element == null ? void 0 : element.current) != null ? _a : window;
    if (!(targetElement && targetElement.addEventListener))
      return;
    const listener = (event) => savedHandler.current(event);
    targetElement.addEventListener(eventName, listener, options);
    return () => {
      targetElement.removeEventListener(eventName, listener, options);
    };
  }, [eventName, element, options]);
}

// src/use-element-size.ts
function useElementSize(defaultSize) {
  var _a, _b;
  const [ref, setRef] = useState(null);
  const [size, setSize] = useState({
    width: (_a = defaultSize.defaultWidth) != null ? _a : 0,
    height: (_b = defaultSize.defaultHeight) != null ? _b : 0
  });
  const handleSize = useCallback(() => {
    setSize({
      width: (ref == null ? void 0 : ref.offsetWidth) || 0,
      height: (ref == null ? void 0 : ref.offsetHeight) || 0
    });
  }, [ref == null ? void 0 : ref.offsetHeight, ref == null ? void 0 : ref.offsetWidth]);
  useEventListener("resize", handleSize);
  useIsomorphicLayoutEffect(() => {
    handleSize();
  }, [ref == null ? void 0 : ref.offsetHeight, ref == null ? void 0 : ref.offsetWidth]);
  return [setRef, size];
}

// src/no-js.tsx
import { jsx } from "react/jsx-runtime";
var SquircleNoScript = () => {
  return /* @__PURE__ */ jsx("noscript", { children: /* @__PURE__ */ jsx("style", { type: "text/css", children: `[data-squircle] { clip-path: none !important; border-radius: attr(data-squircle) !important; }` }) });
};

// src/index.tsx
import { Slot as Slot2 } from "@radix-ui/react-slot";

// src/StaticSquircle.tsx
import { Slot } from "@radix-ui/react-slot";
import { getSvgPath } from "figma-squircle";
import { useMemo } from "react";
import { jsx as jsx2 } from "react/jsx-runtime";
var StaticSquircle = (_a) => {
  var _b = _a, {
    asChild,
    width,
    height,
    cornerRadius,
    cornerSmoothing,
    style
  } = _b, props = __objRest(_b, [
    "asChild",
    "width",
    "height",
    "cornerRadius",
    "cornerSmoothing",
    "style"
  ]);
  const Component = asChild ? Slot : "div";
  const path = useMemo(() => {
    return getSvgPath({
      width,
      height,
      cornerRadius,
      cornerSmoothing
    });
  }, [width, height, cornerRadius, cornerSmoothing]);
  return /* @__PURE__ */ jsx2(Component, __spreadValues({ style: __spreadValues({ clipPath: `path('${path}')` }, style) }, props));
};

// src/index.tsx
import { jsx as jsx3 } from "react/jsx-runtime";
function Squircle(_a) {
  var _b = _a, {
    cornerRadius,
    cornerSmoothing = 0.6,
    asChild,
    style,
    width: w,
    height: h,
    defaultWidth,
    defaultHeight
  } = _b, props = __objRest(_b, [
    "cornerRadius",
    "cornerSmoothing",
    "asChild",
    "style",
    "width",
    "height",
    "defaultWidth",
    "defaultHeight"
  ]);
  const Component = asChild ? Slot2 : "div";
  const [ref, { width, height }] = useElementSize({
    defaultWidth,
    defaultHeight
  });
  const actualWidth = w != null ? w : width;
  const actualHeight = h != null ? h : height;
  const path = useMemo2(() => {
    return getSvgPath2({
      width: actualWidth,
      height: actualHeight,
      cornerRadius,
      cornerSmoothing
    });
  }, [actualWidth, actualHeight, cornerRadius, cornerSmoothing]);
  return /* @__PURE__ */ jsx3(
    Component,
    __spreadProps(__spreadValues({}, props), {
      ref,
      style: __spreadProps(__spreadValues({}, style), {
        borderRadius: cornerRadius,
        width: w != null ? w : defaultWidth,
        height: h != null ? h : defaultHeight,
        clipPath: `path('${path}')`
      }),
      "data-squircle": cornerRadius
    })
  );
}
export {
  Squircle,
  SquircleNoScript,
  StaticSquircle
};
